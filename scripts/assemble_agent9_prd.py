"""assemble_agent9_prd.py
Concatenate the Agent9 primary PRD from smaller markdown files.

Usage (from repo root):
    python scripts/assemble_agent9_prd.py [--output docs/prd/Agent9_PRD.md]

The script does NOT overwrite if the destination already contains identical
content, minimising diff noise in PRs.
"""

from __future__ import annotations

import argparse
import hashlib
import re
import shutil
from pathlib import Path
from typing import List

BASE_DIR = Path(__file__).resolve().parents[1]
DOCS_PRD_DIR = BASE_DIR / "docs" / "prd"
AGENTS_DIR = DOCS_PRD_DIR / "agents"
SERVICES_DIR = DOCS_PRD_DIR / "services"

# Files to include at the very top of the assembled PRD (order matters)
TOP_LEVEL_FILES: List[Path] = [
    DOCS_PRD_DIR / "Agent9_Blueprint.md",
    DOCS_PRD_DIR / "index.md",
]


def gather_source_files() -> List[Path]:
    """Return a list of markdown files to concatenate in deterministic order."""
    files: List[Path] = []

    # Add top-level stubs
    for f in TOP_LEVEL_FILES:
        if f.exists():
            files.append(f)

    # Agent PRDs (alphabetical)
    if AGENTS_DIR.exists():
        agent_files = sorted(p for p in AGENTS_DIR.glob("*.md") if not p.name.endswith(".new"))
        files.extend(agent_files)

    # Service PRDs
    if SERVICES_DIR.exists():
        service_files = sorted(SERVICES_DIR.glob("*.md"))
        files.extend(service_files)

    return files


def sha256_of_text(text: str) -> str:
    return hashlib.sha256(text.encode("utf-8")).hexdigest()


def remove_hackathon_references(text: str) -> str:
    """Strip lines mentioning hackathon or Quick Start Guide (case-insensitive)."""
    patterns = re.compile(r"hackathon|quick\s*start\s*guide", re.IGNORECASE)
    return "\n".join(line for line in text.splitlines() if not patterns.search(line))


def assemble(output_path: Path) -> None:
    files = gather_source_files()
    if not files:
        raise SystemExit("No source PRD files found to assemble.")

    parts: List[str] = [
        "# Agent9 Primary Product Requirements Document\n",
        "<!--- autogenerated, do not edit manually. run scripts/assemble_agent9_prd.py -->\n\n",
    ]

    for fp in files:
        rel = fp.relative_to(BASE_DIR)
        parts.append(f"\n---\n<!-- Begin {rel} -->\n\n")
        content = fp.read_text(encoding="utf-8")
        content = remove_hackathon_references(content)
        parts.append(content)
        parts.append(f"\n\n<!-- End {rel} -->\n")

    combined = "".join(parts)

    # Write only if changed
    if output_path.exists() and sha256_of_text(output_path.read_text(encoding="utf-8")) == sha256_of_text(combined):
        print(f"{output_path} is up-to-date.")
        return

    output_path.write_text(combined, encoding="utf-8")
    print(f"Assembled PRD -> {output_path} ({len(files)} source files)")


def main() -> None:
    parser = argparse.ArgumentParser(description="Assemble Agent9 primary PRD markdown.")
    parser.add_argument("--output", type=Path, default=DOCS_PRD_DIR / "Agent9_PRD.md", help="Output markdown file path")
    args = parser.parse_args()

    assemble(args.output)


if __name__ == "__main__":
    main()
